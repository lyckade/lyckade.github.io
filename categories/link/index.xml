<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Link on Go lycka go</title>
    <link>http://lyckade.github.io/categories/link/</link>
    <description>Recent content in Link on Go lycka go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Sat, 28 May 2016 09:59:35 +0200</lastBuildDate>
    <atom:link href="http://lyckade.github.io/categories/link/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Installation von Golang auf dem Raspberry Pi</title>
      <link>http://lyckade.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</link>
      <pubDate>Sat, 28 May 2016 09:59:35 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</guid>
      <description>&lt;p&gt;Ich war ziemlich schockiert, als ich festgestellt habe, dass ich über &lt;code&gt;apt-get&lt;/code&gt; nur Version 1.3 von Golang bekommen habe. Ich bin eigentlich davon ausgegangen, dass ich zumindest die fast schon ein Jahr alte Version 1.5 installiert hatte.&lt;/p&gt;

&lt;p&gt;Jedoch warum sollte es an der Stelle anders sein. Debian benötigt halt eine gewisse Zeit, bis die Packete für aktuellere Versionen freigegeben werden. Warum sollte das bei den Golang Packeten anders sein.&lt;/p&gt;

&lt;p&gt;Deshalb eine kurze Notiz an mich selber über eine Build Anleitung für aktuellere Versionen (hier 1.5).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2015/09/04/building-go-1-5-on-the-raspberry-pi&#34;&gt;Building Go 1.5 on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5&#34;&gt;Cross compilation&lt;/a&gt; für eine schnellere Installation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eine schnellere Alternative ist, die bereits compilierten Packete von Google zu verwenden. &lt;a href=&#34;http://raspberrypi.stackexchange.com/questions/25956/install-golang-the-easy-way&#34;&gt;Sie Antwort von Arjan auf stackexchange.com&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://storage.googleapis.com/golang/go1.6.2.linux-armv6l.tar.gz 
sudo tar -xzf go1.6.2.linux-armv6l.tar.gz -C /usr/local
sudo chgrp -R staff /usr/local/go
export GOROOT=/usr/local/go
export PATH=&amp;quot;$PATH:$GOROOT/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>http://lyckade.github.io/links/</link>
      <pubDate>Wed, 18 May 2016 19:37:11 +0200</pubDate>
      
      <guid>http://lyckade.github.io/links/</guid>
      <description>

&lt;h3 id=&#34;gopher-conventions&#34;&gt;Gopher Conventions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/gophercon2015&#34;&gt;GopherCon 2015 Denver&lt;/a&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Tom%C3%A1s%20Senart%20-%20Embrace%20the%20Interface/ETI.pdf&#34;&gt;Decorator Pattern Slides (pdf)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/gouk15&#34;&gt;GoUK 2015&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;spannende-links&#34;&gt;Spannende Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/presentation/7-common-mistakes-in-go-2015/&#34;&gt;7 common mistakes in Go (2015)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.bracelab.com/achieving-perfect-ssl-labs-score-with-go&#34;&gt;Achieving a Perfect SSL Labs Score with Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;Awesome Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.philipphauer.de/study/se/design-pattern.php&#34;&gt;Philipp Hauer: Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tmrts.com/go-patterns/&#34;&gt;Go patterns&lt;/a&gt; (wird anscheinend nicht weiter gepflegt)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golangpatterns.info/&#34;&gt;Go Language Patterns&lt;/a&gt; (anscheinend noch under construction)

&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/onsi/ginkgo&#34;&gt;Ginkgo - BDD Testing Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elithrar.github.io/article/testing-http-handlers-go/&#34;&gt;Testing your (HTTP) handlers in Go&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tutorials&#34;&gt;Tutorials&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stevenwhite.com/building-a-rest-service-with-golang-2/&#34;&gt;Building a REST service in Golang&lt;/a&gt;: Model Controller Pattern&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Link: GopherCon 2015</title>
      <link>http://lyckade.github.io/blog/2016/05/18/link-gophercon-2015/</link>
      <pubDate>Wed, 18 May 2016 19:30:23 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/18/link-gophercon-2015/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/gophercon2015&#34;&gt;https://blog.golang.org/gophercon2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Auf dem Blogeintrag zur GopherCon2015 gibt es eine gute Übersicht zu den einzelnen Vorträgen.&lt;/p&gt;

&lt;p&gt;Empfehlenswert sind die &lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Tom%C3%A1s%20Senart%20-%20Embrace%20the%20Interface/ETI.pdf&#34;&gt;Slides zu Embrace the Interface&lt;/a&gt;. Der Vortrag selber ist für meinen Geschmack ein wenig holperig. Jedoch das Vorgestellte Decorator Pattern ist fast schon ein Muß für jeden Gopher.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorial über Model und View in einem REST Service</title>
      <link>http://lyckade.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</link>
      <pubDate>Tue, 17 May 2016 22:40:53 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stevenwhite.com/building-a-rest-service-with-golang-2/&#34;&gt;http://stevenwhite.com/building-a-rest-service-with-golang-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Steven White beschreibt in seinem Tutorial, wie man einen einfachen Web Server mit Go umsetzt. Dabei gliedert er seinen Code in Model und Controller. Alle Models werden dabei in einem Packet &lt;code&gt;models&lt;/code&gt; und die Controller in einem Packet &lt;code&gt;controller&lt;/code&gt; umgesetzt.&lt;/p&gt;

&lt;p&gt;Dieses Pattern ist übersichtlich und führt zu einem strukturierten Code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>