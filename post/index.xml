<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Go lycka go</title>
    <link>http://lyckade.github.io/post/</link>
    <description>Recent content in Posts on Go lycka go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Sun, 05 Jun 2016 19:05:37 +0200</lastBuildDate>
    <atom:link href="http://lyckade.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Vererbung in Go</title>
      <link>http://lyckade.github.io/blog/2016/06/05/vererbung-in-go/</link>
      <pubDate>Sun, 05 Jun 2016 19:05:37 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/06/05/vererbung-in-go/</guid>
      <description>&lt;p&gt;Es gibt eine Klasse, welche als Basis für eine Neue Klasse dienen soll. Für dieses Beispiel &lt;code&gt;Car&lt;/code&gt;. Über eine Funktion wird ein Pointer auf eine Instanz erzeugt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Car struct {
	speed int
	name  string
}

func (c *Car) Drive (){
	fmt.Println(&amp;quot;Brum brum&amp;quot;)
}

func NewCar() *Car {
	car := Car{speed: 100, name: &amp;quot;fastcar&amp;quot;}
	return &amp;amp;car
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Um alle Eigenschaften der ursprünglichen Klasse der neuen Klasse hinzuzufügen fügen wir &lt;code&gt;Car&lt;/code&gt; der neuen Klasse einfach über das struct hinzu. Die Klasse &lt;code&gt;Audi&lt;/code&gt; erbt nun alle Eigenschaften und Methoden von &lt;code&gt;Car&lt;/code&gt;. Wenn wir hierfür auch eine Funktion verwenden wollen, welche eine Referenz auf eine Instanz &lt;code&gt;Audi&lt;/code&gt; erzeugt, dann lässt sich dies auch recht einfach umsetzen. Hierfür setzt man &lt;code&gt;audi.Car = *car&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Audi struct {
	Car
}

func NewAudi() *Audi {
	car := NewCar()
	var audi Audi
	audi.Car = *car
	audi.name = &amp;quot;Audi&amp;quot;
	return &amp;amp;audi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/jo9dByX8sX&#34;&gt;https://play.golang.org/p/jo9dByX8sX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eine praktische Anwendung ist hierbei die Erweiterung der Standardbiliothek.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bufio ein Reader und Writer für den Playground</title>
      <link>http://lyckade.github.io/blog/2016/06/05/bufio-ein-reader-und-writer-f%C3%BCr-den-playground/</link>
      <pubDate>Sun, 05 Jun 2016 18:31:29 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/06/05/bufio-ein-reader-und-writer-f%C3%BCr-den-playground/</guid>
      <description>&lt;p&gt;Für einfache Tests benötigt man öfters einen Writer, welcher den Output an die Konsole schickt. Hierfür eignet sich sehr gut das bufio Packet in Verbindung mit os.&lt;/p&gt;

&lt;p&gt;Das notwendige Beispiel befindet sich sogar schon direkt in der Dokumentation: &lt;a href=&#34;https://godoc.org/bufio#example-Writer&#34;&gt;https://godoc.org/bufio#example-Writer&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;w := bufio.NewWriter(os.Stdout)
fmt.Fprint(w, &amp;quot;Hello, &amp;quot;)
fmt.Fprint(w, &amp;quot;world!&amp;quot;)
w.Flush() // Don&#39;t forget to flush!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/VZ7bbaI53z&#34;&gt;https://play.golang.org/p/VZ7bbaI53z&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Indem der Inhalt des Writers einfach an den os.Stdout geleitet wird, können so die Inhalte eines beliebigen os.Writers als Output im Playground sichtbar gemacht werden.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation von Golang auf dem Raspberry Pi</title>
      <link>http://lyckade.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</link>
      <pubDate>Sat, 28 May 2016 09:59:35 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</guid>
      <description>&lt;p&gt;Ich war ziemlich schockiert, als ich festgestellt habe, dass ich über &lt;code&gt;apt-get&lt;/code&gt; nur Version 1.3 von Golang bekommen habe. Ich bin eigentlich davon ausgegangen, dass ich zumindest die fast schon ein Jahr alte Version 1.5 installiert hatte.&lt;/p&gt;

&lt;p&gt;Jedoch warum sollte es an der Stelle anders sein. Debian benötigt halt eine gewisse Zeit, bis die Packete für aktuellere Versionen freigegeben werden. Warum sollte das bei den Golang Packeten anders sein.&lt;/p&gt;

&lt;p&gt;Deshalb eine kurze Notiz an mich selber über eine Build Anleitung für aktuellere Versionen (hier 1.5).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2015/09/04/building-go-1-5-on-the-raspberry-pi&#34;&gt;Building Go 1.5 on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5&#34;&gt;Cross compilation&lt;/a&gt; für eine schnellere Installation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eine schnellere Alternative ist, die bereits compilierten Packete von Google zu verwenden. &lt;a href=&#34;http://raspberrypi.stackexchange.com/questions/25956/install-golang-the-easy-way&#34;&gt;Sie Antwort von Arjan auf stackexchange.com&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://storage.googleapis.com/golang/go1.6.2.linux-armv6l.tar.gz 
sudo tar -xzf go1.6.2.linux-armv6l.tar.gz -C /usr/local
sudo chgrp -R staff /usr/local/go
export GOROOT=/usr/local/go
export PATH=&amp;quot;$PATH:$GOROOT/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Golang Decorator Pattern</title>
      <link>http://lyckade.github.io/blog/2016/05/19/golang-decorator-pattern/</link>
      <pubDate>Thu, 19 May 2016 10:58:32 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/19/golang-decorator-pattern/</guid>
      <description>

&lt;p&gt;Dieses Pattern wurde auf der GopherCon 2015 in Denver vorgestellt. Hier die Ursprünglichen  &lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Tom%C3%A1s%20Senart%20-%20Embrace%20the%20Interface/ETI.pdf&#34;&gt;Slides zu Embrace the Interface&lt;/a&gt;. Der Vortrag konzentriet sich für meinen Geschmack zuwenig auf die wirklich wesentlichen Punkte.&lt;/p&gt;

&lt;h3 id=&#34;einfacher-allgemeiner-algorithmus&#34;&gt;Einfacher allgemeiner Algorithmus&lt;/h3&gt;

&lt;p&gt;Dieses Pattern ermöglicht es eine Methode um beliebige Funktionen zu erweitern. Pro Funktionserweiterung wird eine Funktion verwendet (SingleResponsibility).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Erstelle ein Interface, welches die zu erweiternde Methode beinhaltet.&lt;/li&gt;
&lt;li&gt;Erstelle einen &lt;code&gt;type&lt;/code&gt; welcher die Methode repräsentiert.&lt;/li&gt;
&lt;li&gt;Erstelle eine Implementierung der Methode des Interface aus 1. für den Typ aus 2.&lt;/li&gt;
&lt;li&gt;Erstelle eine &lt;code&gt;type Decorator&lt;/code&gt; Funktion, welches das Interface aus 1. als Input und als Return beinhaltet.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;decorator-gerüst-für-http-client&#34;&gt;Decorator Gerüst für http.Client&lt;/h3&gt;

&lt;p&gt;In dem Vortrag wird ein Decorator für &lt;code&gt;http.Client.Do(*http.Request)&lt;/code&gt; als Beispiel erstellt. Hier wollen wir nun einen eigenen Typ verwenden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;// Typ me ist Grundlage für das Beispiel.
type me struct{}

// Die Methode Do soll dabei durch einen Decorator erweitert werden.
func (m *me) Do(s string) string {
	fmt.Println(&amp;quot;Ich mache etwas:&amp;quot;)
	fmt.Println(s)
	out := &amp;quot;Fertig!\n------------------&amp;quot;
	return out
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das Grundgerüst für den Decorator sieht in dem Fall wie folgt aus:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;// Schritt 1: Erstelle ein Interface, welches die zu erweiternde Methode
// beinhaltet.
type myInterface interface {
	Do(string) string
}

// Schritt 2: Erstelle einen `type` welcher die Methode repräsentiert.
type MyFunc func(string) string

// Schritt 3: Erstelle eine Implementierung der Methode des Interface
// aus 1. für den Typ aus 2.
// Bei der Implementierung wird die Methode Do auf die eigentliche Funktion
// gemapt. D.h. die Methode Do entspricht eigentlich der Funktion.
func (f MyFunc) Do(s string) string {
	return f(s)
}

// Schritt 4: Erstelle eine `type Decorator` Funktion, welches das
// Interface aus 1. als Input und als Return beinhaltet.
type Decorator func(myInterface) myInterface

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;erstellen-der-decorator-funktionen&#34;&gt;Erstellen der Decorator Funktionen&lt;/h3&gt;

&lt;p&gt;Dier Erstellung eines Decorators als Funktion beinhaltet nun&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;// Erstellen eines Dekorators:
// Definiere eine Funktion, welche einen Decorator zurück gibt
func myDecorator(d string) Decorator {
	// Der Decorator nimmt myInterface als Input und gibt
	// dieses dekoriert wieder zurück.
	return func(i myInterface) myInterface {
		return MyFunc(func(s string) string {
			fmt.Println(d)
			s = &amp;quot;Noch was&amp;quot;
			return i.Do(s)
		})
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das Beispiel Komplett im Playground: &lt;a href=&#34;https://play.golang.org/p/fD8bqoFqeQ&#34;&gt;https://play.golang.org/p/fD8bqoFqeQ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;anwendung&#34;&gt;Anwendung&lt;/h3&gt;

&lt;p&gt;Durch diese Aufteilung lassen sich unterschiedliche Aufgaben in eigene Funktionen aufteilen. Diese können separat sehr einfach getestet werden, das für den Test als Basis nur das definierte Interface verwendet werden muss.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Link: GopherCon 2015</title>
      <link>http://lyckade.github.io/blog/2016/05/18/link-gophercon-2015/</link>
      <pubDate>Wed, 18 May 2016 19:30:23 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/18/link-gophercon-2015/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/gophercon2015&#34;&gt;https://blog.golang.org/gophercon2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Auf dem Blogeintrag zur GopherCon2015 gibt es eine gute Übersicht zu den einzelnen Vorträgen.&lt;/p&gt;

&lt;p&gt;Empfehlenswert sind die &lt;a href=&#34;https://github.com/gophercon/2015-talks/blob/master/Tom%C3%A1s%20Senart%20-%20Embrace%20the%20Interface/ETI.pdf&#34;&gt;Slides zu Embrace the Interface&lt;/a&gt;. Der Vortrag selber ist für meinen Geschmack ein wenig holperig. Jedoch das Vorgestellte Decorator Pattern ist fast schon ein Muß für jeden Gopher.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorial über Model und View in einem REST Service</title>
      <link>http://lyckade.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</link>
      <pubDate>Tue, 17 May 2016 22:40:53 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stevenwhite.com/building-a-rest-service-with-golang-2/&#34;&gt;http://stevenwhite.com/building-a-rest-service-with-golang-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Steven White beschreibt in seinem Tutorial, wie man einen einfachen Web Server mit Go umsetzt. Dabei gliedert er seinen Code in Model und Controller. Alle Models werden dabei in einem Packet &lt;code&gt;models&lt;/code&gt; und die Controller in einem Packet &lt;code&gt;controller&lt;/code&gt; umgesetzt.&lt;/p&gt;

&lt;p&gt;Dieses Pattern ist übersichtlich und führt zu einem strukturierten Code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Client tests in Golang mit httptest</title>
      <link>http://lyckade.github.io/blog/2016/05/17/client-tests-in-golang-mit-httptest/</link>
      <pubDate>Tue, 17 May 2016 10:07:30 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/17/client-tests-in-golang-mit-httptest/</guid>
      <description>&lt;p&gt;Bei der Erstellung von Microservices mittels eine REST API gibt es bei der Kommunikation zwischen zwei Diensten neben dem Empfänger (Server) immer auch eine sendende Seite (Client).&lt;/p&gt;

&lt;p&gt;Für das Testen von http Anfragen an einen Server bietet das &lt;a href=&#34;https://golang.org/pkg/net/http/httptest/#Server&#34;&gt;httptest Packet&lt;/a&gt; einen eigenen Testserver an. Mit der Funktion &lt;code&gt;NewServer()&lt;/code&gt; lässt sich der Testserver starten. Dabei wird eine Referenz auf eine Server instanz zurück gegeben.&lt;/p&gt;

&lt;p&gt;Der Client muss nun für den Test die richtige URL verwenden. Die Testserver URL kann über den Parameter &lt;code&gt;URL&lt;/code&gt; abgefragt werden.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;// Neuen Testserver erstellen
ts := httptest.NewServer(http.HandlerFunc(
	func(w http.ResponseWriter, r *http.Request) {
		// Unterschiedliche Response Szenarien können 
		// über den Header einfach erzeugt werden. 
		w.WriteHeader(200)
		fmt.Fprintln(w, &amp;quot;Hallo Client&amp;quot;)
}))
defer ts.Close()
// URL des Servers ausgeben
fmt.Println(ts.URL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/VmZriIZhLm&#34;&gt;https://play.golang.org/p/VmZriIZhLm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Damit der Code auch testbar ist, muss beim Client die Möglichkeit bestehen die URL für die Abfrage zu manipulieren. Dafür verwendet man für das Erzeugen der URL am Besten das zugehörige &lt;a href=&#34;https://golang.org/pkg/net/url/#URL&#34;&gt;Packet URL&lt;/a&gt;. Der Datentyp URL zerlegt eine URL in folgende Teile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scheme://[userinfo@]host/path[?query][#fragment]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Durch das Setzen des Parameters &lt;code&gt;host&lt;/code&gt; kann somit nur der relevante Teil ausgetauscht werden. Bei einem GET Aufruf kann das ganze wie folgt aussehen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getInfo(url url.URL) *http.Response{
	myClient := new(http.Client)
	resp, err := myClient.Get(url.String())
	if err != nil {
		// Fehlerbehandlung
	}
	return resp

var reqURL = url.Parse(&amp;quot;http://myserver:1234/&amp;quot;)
func main(){
	resp := getInfo(reqURL)
	// Client code ...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Golang und die Zeit: Das magische Datum</title>
      <link>http://lyckade.github.io/blog/2016/05/15/golang-und-die-zeit-das-magische-datum/</link>
      <pubDate>Sun, 15 May 2016 15:37:02 +0200</pubDate>
      
      <guid>http://lyckade.github.io/blog/2016/05/15/golang-und-die-zeit-das-magische-datum/</guid>
      <description>

&lt;p&gt;Die Dokumentation zu dem Packet time ist bezüglich der Formatierung des Datums nicht sehr ausführlich. Deshalb soll die fast schon geniale Logik kurz vorgestellt werden.&lt;/p&gt;

&lt;h2 id=&#34;das-magische-datum&#34;&gt;Das magische Datum&lt;/h2&gt;

&lt;p&gt;Der Ansatz von go ist anders als bekannt. Die Definition des Datum-Format erfolgt dabei nicht über Flags sondern über ein fest eindeutig definiertes Datum.&lt;/p&gt;

&lt;p&gt;Die Dokumentation hat in dem Packet bereits ein paar Konstanten definiert: &lt;a href=&#34;https://godoc.org/time#pkg-constants&#34;&gt;https://godoc.org/time#pkg-constants&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ANSIC       = &amp;ldquo;Mon Jan _2 15:04:05 2006&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An den Konstanten erkennt man das magische Datum: der 2.01.2006 um 15:04:05. In einer anderen Darstellung kann man sehen, dass dies die Zahlen von 1 bis 7 sind:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;01/02 03:04:05PM &amp;lsquo;06 -0700&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dadurch wird das jeweilige Element für die Formatierung identifieziert.&lt;/p&gt;

&lt;p&gt;Möchte ich nun einen einfachen Zeitstempel erzeugen kann ich das Layout ganz einfach mit dem Datum definieren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const timestampLayout = &amp;quot;20060102150405&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Die Ausgabe erfolgt nun ganz einfach über &lt;code&gt;Format()&lt;/code&gt;. Das Beste an der Stelle ist, dass dies mit der Funktion &lt;code&gt;time.Parse()&lt;/code&gt;  auch in die andere Richtung funktioniert.&lt;/p&gt;

&lt;p&gt;Auf dem Playground gibt es das ganze noch einmal als komplettes Beispiel:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/n0YuYWwolV&#34;&gt;https://play.golang.org/p/n0YuYWwolV&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>